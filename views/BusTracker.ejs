<html>

<head>
    <%- include('../template/layout/header') %>
    <title>Bus tracker</title>

    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <style>
        #map {
            height: 60%;
            width: 60%;
            text-align: center;
            display: block;
            margin-left: auto;
            margin-right: auto;
        }

        /* Optional: Makes the sample page fill the window. */
        html,
        body {
            height: 100%;
            margin: 0;
            padding: 0;
            text-align: center;
        }
    </style>
</head>

<body>

    <div id="map"></div>

    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCFZ2FjgtItESFsLMsvmEDSCVJm_KfXOqE&callback=initMap&v=weekly"
        async></script>

    <button onclick="initMap()" >reload</button>

</body>
<script>

    let map;
    let buses = '<%- JSON.stringify(buses) %>';
    function initMap() {
        const bus = JSON.parse(buses);
        let lat = bus[0].busLocation.lat;
        let lng = bus[0].busLocation.lng;
        let stops = bus[0].route;

        const myLatLng = { lat: parseFloat(lat), lng: parseFloat(lng) };
        map = new google.maps.Map(document.getElementById("map"), {
            center: new google.maps.LatLng(lat, lng),
            zoom: 16,
        });

        calculateAndDisplayRoute(map, stops);

        new google.maps.Marker({
            position: myLatLng,
            map,
            title: String(bus[0].busNo),
            icon: 'https://img.icons8.com/ios-filled/50/000000/bus.png'
        });
        for (const stop in stops) {
            let route = bus[0].route[stop];
            let lat = parseFloat(route.lat);
            let lng = parseFloat(route.lng);
            center = { lat, lng };
            const cityCircle = new google.maps.Circle({
                strokeColor: "#FF0000",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#FF0000",
                fillOpacity: 0.35,
                map,
                center: center,
                radius: 10,
            });

        }
    }
    function calculateAndDisplayRoute(map, stops) {

        const directionsService = new google.maps.DirectionsService();
        const directionsRenderer = new google.maps.DirectionsRenderer();
        directionsRenderer.setMap(map);

        const checkboxArray = stops;
        const waypts = [];


        for (let i = 1; i < checkboxArray.length - 1; i++) {
            waypts.push({
                location: new google.maps.LatLng(parseFloat(checkboxArray[i].lat), parseFloat(checkboxArray[i].lng)),
                stopover: true,
            });
        }

        originLatLng = new google.maps.LatLng(parseFloat(stops[0].lat), parseFloat(stops[0].lng));
        destLatLng = new google.maps.LatLng(parseFloat(stops[checkboxArray.length - 1].lat), parseFloat(stops[checkboxArray.length - 1].lng));
        directionsService
            .route({
                origin: originLatLng,
                destination: destLatLng,
                waypoints: waypts,
                optimizeWaypoints: true,
                travelMode: google.maps.TravelMode.DRIVING,


            })
            .then((response) => {
                directionsRenderer.setDirections(response);

                const route = response.routes[0];
                //const summaryPanel = document.getElementById("directions-panel");

                //summaryPanel.innerHTML = "";

                /*/ For each route, display summary information.
                for (let i = 0; i < route.legs.length; i++) {
                    const routeSegment = i + 1;
 
                    summaryPanel.innerHTML +=
                        "<b>Route Segment: " + routeSegment + "</b><br>";
                    summaryPanel.innerHTML += route.legs[i].start_address + " to ";
                    summaryPanel.innerHTML += route.legs[i].end_address + "<br>";
                    summaryPanel.innerHTML += route.legs[i].distance.text + "<br><br>";
                } */
            })
            .catch((e) => window.alert("Directions request failed due to " + status));
    }
</script>

</html>