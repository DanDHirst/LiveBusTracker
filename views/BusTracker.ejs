<html>

<head>
    <%- include('../template/layout/header') %>
    <script src="https://cdn.socket.io/socket.io-3.0.1.min.js"></script>
    <title>Bus tracker</title>

    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <style>
        #map {
            height: 60%;
            width: 60%;
            text-align: center;
            display: block;
            margin-left: auto;
            margin-right: auto;
        }

        /* Optional: Makes the sample page fill the window. */
        html,
        body {
            height: 100%;
            margin: 0;
            padding: 0;
            text-align: center;
        }

        body {
            font-family: Arial, Helvetica, sans-serif;
        }

        .modal {
            display: none;
            /* Hidden by default */
            position: fixed;
            /* Stay in place */
            z-index: 1;
            /* Sit on top */
            padding-top: 100px;
            /* Location of the box */
            left: 0;
            top: 0;
            width: 100%;
            /* Full width */
            height: 100%;
            /* Full height */
            overflow: auto;
            /* Enable scroll if needed */
            background-color: rgb(0, 0, 0);
            /* Fallback color */
            background-color: rgba(0, 0, 0, 0.4);
            /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-content {
            position: relative;
            background-color: #fefefe;
            margin: auto;
            padding: 0;
            border: 1px solid #888;
            width: 80%;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            -webkit-animation-name: animatetop;
            -webkit-animation-duration: 0.4s;
            animation-name: animatetop;
            animation-duration: 0.4s
        }

        /* Add Animation */
        @-webkit-keyframes animatetop {
            from {
                top: -300px;
                opacity: 0
            }

            to {
                top: 0;
                opacity: 1
            }
        }

        @keyframes animatetop {
            from {
                top: -300px;
                opacity: 0
            }

            to {
                top: 0;
                opacity: 1
            }
        }

        /* The Close Button */
        .close {
            color: white;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

        .modal-header {
            padding: 2px 16px;
            background-color: #5cb85c;
            color: white;
        }

        .modal-body {
            padding: 2px 16px;
        }

        .modal-footer {
            padding: 2px 16px;
            background-color: #5cb85c;
            color: white;
        }
    </style>
</head>

<body>
    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
            </div>
            <div class="modal-body">
                <p>Your Bus Stop Is Next!</p>
            </div>
        </div>

    </div>

    <div id="map"></div>

    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
    <script
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCFZ2FjgtItESFsLMsvmEDSCVJm_KfXOqE&callback=initMap&v=weekly"
        async>
        </script>

    <button onclick="socketRequest()"> Refresh Map</button>
    <label for="Locations">Choose a location:</label>

    <select name="locations" id="locations">
        <% for(var i=0; i < buses[0].route.length; i++) { %>
        <option value="<%= buses[0].route[i].locName %>"><%= buses[0].route[i].locName %></option>

        <% } %>

    </select>

</body>
<script>


    function play() {
        var audio = new Audio(
            'https://cdn.videvo.net/videvo_files/audio/premium/audio0086/watermarked/el_interface_button_30_hpx_preview.mp3');
        audio.play();
    }

    var modal = document.getElementById("myModal");

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
    }

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    let socket = io("/");
    $(function () {
        setInterval(socketRequest, 30000);
        socket.on("server message", function (msg) {
            console.log("rec" + msg);
            console.log("emitted message");
            buses = JSON.stringify(msg);
            let bus = JSON.parse(buses);
            var location = $("#locations option:selected").text();
            if (bus[0].busLocation.nextStop == location) {
                play();
                modal.style.display = "block";
            }

            initMap();
        });
    })

    let map;
    let buses = '<%- JSON.stringify(buses) %>';
    function initMap() {
        const bus = JSON.parse(buses);
        let lat = bus[0].busLocation.lat;
        let lng = bus[0].busLocation.lng;
        let stops = bus[0].route;

        const myLatLng = { lat: parseFloat(lat), lng: parseFloat(lng) };
        map = new google.maps.Map(document.getElementById("map"), {
            center: new google.maps.LatLng(lat, lng),

        });

        calculateAndDisplayRoute(map, stops);

        new google.maps.Marker({
            position: myLatLng,
            map,
            title: String(bus[0].busNo),
            icon: 'https://img.icons8.com/ios-filled/50/000000/bus.png'
        });
        for (const stop in stops) {
            let route = bus[0].route[stop];
            let lat = parseFloat(route.lat);
            let lng = parseFloat(route.lng);
            center = { lat, lng };
            const cityCircle = new google.maps.Circle({
                strokeColor: "#FF0000",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#FF0000",
                fillOpacity: 0.35,
                map,
                center: center,
                radius: 10,
            });

        }

    }
    function calculateAndDisplayRoute(map, stops) {

        const directionsService = new google.maps.DirectionsService();
        const directionsRenderer = new google.maps.DirectionsRenderer();
        directionsRenderer.setMap(map);

        const checkboxArray = stops;
        const waypts = [];


        for (let i = 1; i < checkboxArray.length - 1; i++) {
            waypts.push({
                location: new
                    google.maps.LatLng(parseFloat(checkboxArray[i].lat), parseFloat(checkboxArray[i].lng)), stopover: true,
            });
        } originLatLng = new google.maps.LatLng(parseFloat(stops[0].lat), parseFloat(stops[0].lng)); destLatLng = new
            google.maps.LatLng(parseFloat(stops[checkboxArray.length - 1].lat), parseFloat(stops[checkboxArray.length -
                1].lng)); directionsService.route({
                    origin: originLatLng, destination: destLatLng, waypoints: waypts,
                    optimizeWaypoints: true, travelMode: google.maps.TravelMode.DRIVING,
                }).then((response) => {
                    directionsRenderer.setDirections(response);

                    const route = response.routes[0];
            //const summaryPanel = document.getElementById("directions-panel");

            //summaryPanel.innerHTML = "";

            /*/ For each route, display summary information.
            for (let i = 0; i < route.legs.length; i++) { const routeSegment=i + 1; summaryPanel.innerHTML
                +="<b>Route Segment: " + routeSegment + "</b><br>" ; summaryPanel.innerHTML
                +=route.legs[i].start_address + " to " ; summaryPanel.innerHTML +=route.legs[i].end_address + "<br>" ;
                summaryPanel.innerHTML +=route.legs[i].distance.text + "<br><br>" ; } */ }).catch((e) =>
                        window.alert("Directions request failed due to " + status));
    }

    function socketRequest() {
        socket.emit("Client Message", "ack");
    }

</script>

</html>